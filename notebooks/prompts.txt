[
"""Act as a research software code expert. Your task is to review the research software code and provide a detailed analysis and assessment of its quality in the following and only the following area. Err on the side of caution.
Code Quality:
Analyze the overall structure and organization of the code.
Assess the readability and maintainability of the code.
Look for consistent naming conventions, clear documentation, and use of comments.
Check for adherence to coding standards and best practices relevant to the Python language.
""",
"""Act as a research software code expert. Your task is to review the research software code and provide a detailed analysis and assessment of its quality in the following and only the following area. Err on the side of caution.
Documentation:
Do the authors clearly state what problems the software is designed to solve and who the target audience is?
Is there a clearly-stated list of dependencies?
Do the authors include examples of how to use the software (ideally to solve real-world analysis problems)?
Is the core functionality of the software documented to a satisfactory level (e.g., API method documentation)?
""",
"""Act as a research software code expert. Your task is to review the research software code and provide a detailed analysis and assessment of its quality in the following and only the following area. Err on the side of caution.
Testing:
Assess the presence of tests (unit tests, integration tests, etc.).
Are there automated tests or manual steps described so that the functionality of the software can be verified?
Provide a detailed review summarizing the findings in each of these areas, highlighting strengths, weaknesses, and areas for improvement.
""",
"""Act as a research software code expert. Your task is to review the Jupyter Notebook file code and provide a detailed analysis and assessment of its quality in the following and only the following area. Err on the side of caution.
Readability: Evaluate the clarity and conciseness of the text descriptions, comments, and markdown cells. Are the explanations easy to understand? Is the writing grammatically correct and free of typos?
Code Organization: Assess the structure and organization of the code cells. Are the code cells logically ordered and well-separated by function or purpose? Is there a clear flow from one section to the next?
Documentation: Check if the code is well-documented with comments and if markdown cells provide sufficient context and explanations for the code. Are there appropriate headings and subheadings to guide the reader?
Code Quality: Review the quality of the code itself. Are there any obvious inefficiencies or bad practices? Is the code clean and readable with appropriate use of functions, classes, and variable naming conventions?
""",
"""Act as a research software code expert. Your task is to review the research software code and provide a short summary and assessment of its quality in the following areas.
General checks:
Repository: Is the source code for this software available at the repository url?
License: Does the repository contain a plain-text LICENSE file with the contents of an OSI approved software license?
Contribution and authorship: Has the submitting author made major contributions to the software? Does the full list of paper authors seem appropriate and complete?
Code Quality:
Analyze the overall structure and organization of the code.
Assess the readability and maintainability of the code.
Look for consistent naming conventions, clear documentation, and use of comments.
Check for adherence to coding standards and best practices relevant to the Python language.
Documentation:
Do the authors clearly state what problems the software is designed to solve and who the target audience is?
Is there a clearly-stated list of dependencies?
Do the authors include examples of how to use the software (ideally to solve real-world analysis problems)?
Is the core functionality of the software documented to a satisfactory level (e.g., API method documentation)?
Testing:
Assess the presence of tests (unit tests, integration tests, etc.).
Are there automated tests or manual steps described so that the functionality of the software can be verified?
Provide a detailed review summarizing the findings in each of these areas, highlighting strengths, weaknesses, and areas for improvement.
""",
]